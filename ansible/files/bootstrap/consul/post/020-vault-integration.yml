# Vault integration
- name: "{{ service }} - post/vault-integration - vault integration"
  block:
    - name: "{{ service }} - set default variables as ansible facts"
      set_fact:
        consul:
          vault:
            acl:
              admin_token: ""
              producer_token: ""
              consumer_token: ""
          policy:
            admin: "admin-policy"
            producer: "producer-policy"
            consumer: "consumer-policy"
        consul_host: "127.0.0.1:8500"

    - name: "{{ service }} - create management token for Vault, with global-management policy attached to it"
      shell:
        cmd: consul acl token create -policy-name=global-management -format=json | jq -r .SecretID
      register: secret_id
      environment:
        CONSUL_HTTP_TOKEN: "{{ lookup('env', 'consul_master_token') }}"
      tags:
        - do-not-lint

    - name: "{{ service }} - configure Vault to connect and authenticate to Consul"
      command: vault write consul/config/access address="{{ consul_host }}" token="{{ secret_id.stdout }}"
      environment:
        VAULT_TOKEN: "{{ lookup('env', 'vault_master_token') }}"
      tags:
        - do-not-lint

    # example 1 - Admin policy, admin role
    # 1. Create consul policy for admin
    # 2. Map role to policy
    # 3. Generate token(s)
    - name: "{{ service }} - create {{ consul.policy.admin }}"
      command: consul acl policy create -name={{ consul.policy.admin }} -rules=@/etc/ansible/templates/conf/consul/policies/admin_policy.hcl
      environment:
        CONSUL_HTTP_TOKEN: "{{ lookup('env', 'consul_master_token') }}"

    - name: "{{ service }} - map admin role with {{ consul.policy.admin }} to a Consul ACL policy"
      command:
        cmd: vault write consul/roles/admin-role policies="{{ consul.policy.admin }}"
      environment:
        VAULT_TOKEN: "{{ lookup('env', 'vault_master_token') }}"

    - name: "{{ service }} - example, generate token for role admin"
      shell:
        cmd: vault read consul/creds/admin-role -format=json | jq -r .data.token
      register: admin_role_token
      environment:
        VAULT_TOKEN: "{{ lookup('env', 'vault_master_token') }}"

    # example 2 - Producer policy, producer role
    # 1. Create consul policy for producer
    # 2. Map role to policy
    # 3. Generate token(s)
    - name: "{{ service }} - create {{ consul.policy.producer }}"
      command: consul acl policy create -name={{ consul.policy.producer }} -rules=@/etc/ansible/templates/conf/consul/policies/producer_policy.hcl
      environment:
        CONSUL_HTTP_TOKEN: "{{ lookup('env', 'consul_master_token') }}"

    - name: "{{ service }} - map producer role with {{ consul.policy.producer }} to a Consul ACL policy"
      command: vault write consul/roles/producer-role policies="{{ consul.policy.producer }}"
      environment:
        VAULT_TOKEN: "{{ lookup('env', 'vault_master_token') }}"

    - name: "{{ service }} - example, generate token for role producer"
      shell:
        cmd: vault read consul/creds/producer-role -format=json | jq -r .data.token
      register: producer_role_token
      environment:
        VAULT_TOKEN: "{{ lookup('env', 'vault_master_token') }}"
      tags:
        - do-not-lint

    # example 3 - Consumer policy, consumer role
    # 1. Create consul policy for consumer
    # 2. Map role to policy
    # 3. Generate token(s)
    - name: "{{ service }} - create {{ consul.policy.consumer }}"
      command: consul acl policy create -name={{ consul.policy.consumer }} -rules=@/etc/ansible/templates/conf/consul/policies/consumer_policy.hcl
      environment:
        CONSUL_HTTP_TOKEN: "{{ lookup('env', 'consul_master_token') }}"

    - name: "{{ service }} - map consumer role with {{ consul.policy.consumer }} to a Consul ACL policy"
      command: vault write consul/roles/consumer-role policies="{{ consul.policy.consumer }}"
      environment:
        VAULT_TOKEN: "{{ lookup('env', 'vault_master_token') }}"

    - name: "{{ service }} - example, generate token for role producer"
      shell:
        cmd: vault read consul/creds/consumer-role -format=json | jq -r .data.token
      register: consumer_role_token
      environment:
        VAULT_TOKEN: "{{ lookup('env', 'vault_master_token') }}"
      tags:
        - do-not-lint

    #######################
    ### Put tokens generated by vault for consul in vault K/V
    #######################
    - name: "{{ service }} - put generated tokens in vault k/v as examples"
      command: >-
        vault kv put secret/example/consul-token-example
        admin_token="{{ admin_role_token.stdout }}"
        producer_token="{{ producer_role_token.stdout }}"
        consumer_token="{{ consumer_role_token.stdout }}"
      environment:
        VAULT_TOKEN: "{{ lookup('env', 'vault_master_token') }}"

    #######################
    ### tokens will be used in tests
    #######################
    - name: "{{ service }} - set generated tokens in ansible facts"
      set_fact:
        consul:
          vault:
            acl:
              admin_token: "{{ admin_role_token.stdout }}"
              producer_token: "{{ producer_role_token.stdout }}"
              consumer_token: "{{ consumer_role_token.stdout }}"

  when: lookup('env', 'consul_acl') | bool and ansible_local.consul.vault_integration.completed is not defined
