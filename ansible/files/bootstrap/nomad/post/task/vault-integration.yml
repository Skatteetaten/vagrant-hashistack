- name: Set variables
  set_fact:
    nomad:
      policy:
        producer: "producer-policy"
        consumer: "consumer-policy"

# Bootstrap and management tokens
- name: "{{ service }} - post/vault-integration - fetch bootstrap token nomad"
  shell:
    cmd: vault kv get -field=secret-id secret/example/nomad-token-bootstrap
  register: bootstrap_token
  environment:
    VAULT_TOKEN: "{{ lookup('env', 'vault_master_token') }}"

- name: "{{ service }} - post/vault-integration -  Create management token for vault"
  shell:
    cmd: nomad acl token create -name="Vault Management Token" -type="management" > management.token
  environment:
    NOMAD_TOKEN: "{{ bootstrap_token.stdout }}"

- name: "{{ service }} - post/vault-integration - register accessor ID"
  shell:
    cmd: awk '/Accessor/ {print $4}' management.token
  register: management_accessor_id

- name: "{{ service }} - post/vault-integration - register secret ID"
  shell:
    cmd: awk '/Secret/ {print $4}' management.token
  register: management_secret_id

- name: "{{ service }} - post/vault-integration - add nomad management token to vault"
  shell:
    cmd: vault kv put secret/example/nomad-management-token management-accessor-id="{{ management_accessor_id.stdout }}" management-secret-id="{{ management_secret_id.stdout }}"
  environment:
    VAULT_TOKEN: "{{ lookup('env', 'vault_master_token') }}"

- name: "{{ service }} - post/vault-integration - delete management.token file"
  file:
    path: management.token
    state: absent

- name: "{{ service }} - post/vault-integration - write vault's nomad config"
  shell:
    cmd: vault write nomad/config/access address=http://127.0.0.1:4646 token="{{ management_secret_id.stdout }}"
  register: result
  environment:
    VAULT_TOKEN: "{{ lookup('env', 'vault_master_token') }}"

# Map roles
- name: "{{ service }} - post/vault-integration - map role consumer-role with nomad's {{ nomad.policy.consumer }}"
  shell: vault write nomad/role/consumer-role policies={{ nomad.policy.consumer }}
  register: map_consumer_role
  environment:
    VAULT_TOKEN: "{{ lookup('env', 'vault_master_token') }}"
  failed_when: map_consumer_role.stdout is not search("Success!")

- name: Debugg
  debug:
    msg: "{{ map_consumer_role.stdout }}"

- name: "{{ service }} - post/vault-integration - map role producer-role with nomad's {{ nomad.policy.producer }}"
  shell: vault write nomad/role/producer-role policies={{ nomad.policy.producer }}
  register: map_producer_role
  environment:
    VAULT_TOKEN: "{{ lookup('env', 'vault_master_token') }}"
  failed_when: map_producer_role.stdout is not search("Success!")

# todo remove later: template depends on write role (write role associated with produce role)
# https://github.com/fredrikhgrelland/vagrant-hashistack-template/issues/58
- name: "{{ service }} - post/vault-integration - map role write with nomad's { nomad.policy.producer }}"
  shell: vault write nomad/role/write policies={{ nomad.policy.producer }}
  register: map_write_role
  environment:
    VAULT_TOKEN: "{{ lookup('env', 'vault_master_token') }}"
  failed_when: map_write_role.stdout is not search("Success!")

# Generate tokens
- name: "{{ service }} - post/vault-integration - example, generate token for consumer-role"
  shell: vault read nomad/creds/consumer-role -format=json | jq -r .data.secret_id
  register: consumer_nomad_role_token
  environment:
    VAULT_TOKEN: "{{ lookup('env', 'vault_master_token') }}"
  failed_when: consumer_nomad_role_token.stdout | length < 1

- name: "{{ service }} - post/vault-integration - example, generate token for producer-role"
  shell: vault read nomad/creds/producer-role -format=json | jq -r .data.secret_id
  register: producer_nomad_role_token
  environment:
    VAULT_TOKEN: "{{ lookup('env', 'vault_master_token') }}"
  failed_when: producer_nomad_role_token.stdout | length < 1

#######################
### Put tokens generated by vault for consul in vault K/V
#######################
- name: Vault - put generated tokens in k/v as examples
  shell: vault kv put secret/example/nomad-role-token producer_token="{{ producer_nomad_role_token.stdout }}" consumer_token="{{ consumer_nomad_role_token.stdout }}"
  environment:
    VAULT_TOKEN: "{{ lookup('env', 'vault_master_token') }}"

#######################
### tokens will be used in tests
#######################
- set_fact:
    nomad:
      vault:
        acl:
          admin_token: "{{ management_secret_id.stdout }}"
          producer_token: "{{ producer_nomad_role_token.stdout }}"
          consumer_token: "{{ consumer_nomad_role_token.stdout }}"
