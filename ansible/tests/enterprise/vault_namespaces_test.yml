# User-story -> namespaces in Vault
# Aim: show resource isolation
# Reference: https://learn.hashicorp.com/tutorials/vault/namespaces

# 1. Create namespaces ["education", "education/training", "education/certification"]
# 2. Create policies ["edu-admin", "training-admin"]
# 3. Setup entities and groups
# 4. Test the 'Bob' entity
# 5. Test the Training Admin group

# 1. Create namespaces ["education", "education/training", "education/certification"]
- name: Set variables
  set_fact:
    vault_master_token: "master"
    vault_http_host: "http://127.0.0.1:8200"

- name: Create namepspace education
  shell: vault namespace create education
  environment:
    VAULT_TOKEN: "{{ vault_master_token }}"
    VAULT_ADDR: "{{ vault_http_host }}"

- name: Create namespace 'education/training'
  shell: vault namespace create -namespace=education training
  environment:
    VAULT_TOKEN: "{{ vault_master_token }}"
    VAULT_ADDR: "{{ vault_http_host }}"

- name: Create namespace 'education/certification'
  shell: vault namespace create -namespace=education certification
  environment:
    VAULT_TOKEN: "{{ vault_master_token }}"
    VAULT_ADDR: "{{ vault_http_host }}"

- name: List the existing namespaces on the root, verify list contains 'education/'
  shell: vault namespace list -format=json | jq -r '.[]' | grep education/
  register: namespace_list_root
  environment:
    VAULT_TOKEN: "{{ vault_master_token }}"
    VAULT_ADDR: "{{ vault_http_host }}"

- name: List child namespaces under 'education', verify list contains 'certification' and 'training'
  shell: vault namespace list -namespace=education -format=json
  register: namespace_list_childs
  environment:
    VAULT_TOKEN: "{{ vault_master_token }}"
    VAULT_ADDR: "{{ vault_http_host }}"
  failed_when: namespace_list_childs.stdout is not search("certification") and namespace_list_childs.stdout is not search("training")

# 2. Create policies ["edu-admin", "training-admin"]

- name: Create 'edu-admin' policy under 'education' namespace
  shell: vault policy write -namespace=education edu-admin /etc/ansible/tests/enterprise/vault-policy/edu-admin.hcl
  environment:
    VAULT_TOKEN: "{{ vault_master_token }}"
    VAULT_ADDR: "{{ vault_http_host }}"

- name: Create 'training-admin' policy under 'education/training' namespace
  shell: vault policy write -namespace=education/training training-admin /etc/ansible/tests/enterprise/vault-policy/training-admin.hcl
  environment:
    VAULT_TOKEN: "{{ vault_master_token }}"
    VAULT_ADDR: "{{ vault_http_host }}"

# 3. Setup entities and groups

- name: Enable the userpass auth method
  shell: vault auth enable -namespace=education userpass
  environment:
    VAULT_TOKEN: "{{ vault_master_token }}"
    VAULT_ADDR: "{{ vault_http_host }}"

- name: Create a user bob
  shell: vault write -namespace=education auth/userpass/users/bob password="training"
  environment:
    VAULT_TOKEN: "{{ vault_master_token }}"
    VAULT_ADDR: "{{ vault_http_host }}"

- name: Create an entity for Bob Smith with edu-admin policy attached. Save the generated entity ID in a file named entity_id.txt
  shell: vault write -namespace=education -format=json identity/entity name="Bob Smith" policies="edu-admin" | jq -r ".data.id"
  register: bob_entity_id
  environment:
    VAULT_TOKEN: "{{ vault_master_token }}"
    VAULT_ADDR: "{{ vault_http_host }}"

- name: Debug bob_entity_id
  debug:
    msg: "bob_entity_id: {{ bob_entity_id }}"

- name: Get the mount accessor for userpass auth method
  shell: vault auth list -namespace=education -format=json | jq -r '.["userpass/"].accessor'
  register: mount_accessor_userpass
  environment:
    VAULT_TOKEN: "{{ vault_master_token }}"
    VAULT_ADDR: "{{ vault_http_host }}"

- name: Debug
  debug:
    msg: "mount_accessor_userpass: {{ mount_accessor_userpass }}"

- name: Create an entity alias for Bob Smith to attach bob
  shell: |
    vault write -namespace=education identity/entity-alias name="bob" \
      canonical_id={{ bob_entity_id.stdout }} mount_accessor={{ mount_accessor_userpass.stdout }}
  environment:
    VAULT_TOKEN: "{{ vault_master_token }}"
    VAULT_ADDR: "{{ vault_http_host }}"

- name: Create a group, "Training Admin" in education/training namespace with Bob Smith entity as its member
  shell: |
    vault write -namespace=education/training identity/group \
      name="Training Admin" policies="training-admin" \
      member_entity_ids={{ bob_entity_id.stdout }}
  environment:
    VAULT_TOKEN: "{{ vault_master_token }}"
    VAULT_ADDR: "{{ vault_http_host }}"

# 4. Test the 'Bob' entity

- name: Login as bob in namespace 'education' and get client token
  shell: vault login -method=userpass username=bob password=training -format=json | jq -r ".auth.client_token"
  register: bob_education_token
  environment:
    VAULT_NAMESPACE: "education"
    VAULT_ADDR: "{{ vault_http_host }}"

- name: Debug bob_education_token
  debug:
    msg: "bob_education_token {{ bob_education_token.stdout }}"

- name: Verify that you can create a new namespace called web-app
  shell: vault namespace create web-app
  register: try_register_namespace_1
  environment:
    VAULT_NAMESPACE: "education"
    VAULT_ADDR: "{{ vault_http_host }}"
    VAULT_TOKEN: "{{ bob_education_token.stdout }}"
  failed_when: try_register_namespace_1.rc > 0

- name: Debug try_register_namespace_1
  debug:
    msg: "try_register_namespace_1 {{ try_register_namespace_1 }}"

- name: Verify that you can enable key/value v2 secrets engine at edu-secret
  shell: vault secrets enable -path=edu-secret kv-v2
  register: try_enable_kv2_1
  environment:
    VAULT_NAMESPACE: "education"
    VAULT_ADDR: "{{ vault_http_host }}"
    VAULT_TOKEN: "{{ bob_education_token.stdout }}"
  failed_when: try_enable_kv2_1.rc > 0

# 5. Test the Training Admin group

- name: Token lookup
  shell: vault token lookup
  register: bob_lookup_token_1
  environment:
    VAULT_NAMESPACE: "education"
    VAULT_ADDR: "{{ vault_http_host }}"
    VAULT_TOKEN: "{{ bob_education_token.stdout }}"

- name: Debug bob_lookup_token_1
  debug:
    msg: "bob_lookup_token_1 {{ bob_lookup_token_1 }}"

- name: Create namespace education/training/vault-training/
  shell: vault namespace create vault-training
  register: bob_lookup_token_1
  environment:
    VAULT_NAMESPACE: "education/training"
    VAULT_ADDR: "{{ vault_http_host }}"
    VAULT_TOKEN: "{{ bob_education_token.stdout }}"

- name: Enable key/value v1 secrets engine at team-secret
  shell: vault secrets enable -path=team-secret -version=1 kv
  environment:
    VAULT_NAMESPACE: "education/training"
    VAULT_ADDR: "{{ vault_http_host }}"
    VAULT_TOKEN: "{{ bob_education_token.stdout }}"
