---
- hosts: all
  become: true
  tasks:
    - name: Copy ansible directory
      copy:
        src: ./
        dest: /etc/ansible/
        remote_src: true
        directory_mode: true
        mode: '0755'

    - name: Create /etc/{{ item }}.d
      file:
        path: /etc/{{ item }}.d
        state: directory
        mode: 0644
      loop: "{{ hashicorp.daemons }}"

    - name: Create /etc/{{ item }}.d/policies
      file:
        path: /etc/{{ item }}.d/policies
        state: directory
        mode: 0644
      loop: "{{ hashicorp.daemons }}"

    - name: systemd reload
      systemd: daemon_reload=yes

    - name: Create directories for hashistack
      file:
        path: "{{ item }}"
        state: directory
        mode: 0755
        owner: root
        group: root
      with_items:
        - /usr/local/bin/oss
        - /usr/local/bin/ent

    - name: Install open source hashistack
      include_role:
        name: hashistack
      vars:
        software: "{{ item.key }}"
        version: "{{ item.value }}"
        destination_dir: /usr/local/bin/oss
      loop: "{{ query('dict', hashicorp.tools) }}"

    - name: "Symlink oss only binaries"
      file:
        src: "/usr/local/bin/oss/{{ item }}"
        dest: "/usr/local/bin/{{ item }}"
        state: link
      loop:
        - packer
        - terraform
        - consul-template

    - name: Install enterprise hashistack
      include_role:
        name: hashistack
      vars:
        software: "{{ item.key }}"
        version: "{{ item.value }}"
        destination_dir: /usr/local/bin/ent
      loop: "{{ query('dict', hashicorp.tools_enterprise) }}"

    - name: Update message of the day
      template:
        src: "{{ item }}"
        dest: "/etc/update-motd.d/{{ (item | basename | splitext)[0] }}"
        mode: +rx
      with_fileglob:
        - templates/update-motd.d/*

    - name: CNI - Ensure Dir
      file:
        path: /opt/cni/bin
        state: directory
        mode: o+rwx

    - name: CNI - Install
      unarchive:
        src: "https://github.com/containernetworking/plugins/releases/download/v{{ nomad_cni }}/cni-plugins-linux-amd64-v{{ nomad_cni }}.tgz"
        remote_src: true
        dest: /opt/cni/bin
        mode: o+rwx

    - name: CNI - Tune iptables - persist
      copy:
        dest: "/etc/sysctl.d/cni-iptables"
        mode: +rx
        content: |
          net.bridge.bridge-nf-call-arptables = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1

    - name: CNI - Tune iptables - run
      command: sysctl --system
      register: sysctl
      changed_when: sysctl.rc == 0

    - name: Install Docker SDK for Python
      pip:
        name: docker

# Add change to bash.bashrc in order to use environment in vagrant and ansible (non interactive)
    - name: Copy .env_default
      template:
        src: templates/.env_default.j2
        dest: /home/vagrant/.env_default
        mode: o+rwx

    - name: source .env_default .env .env_override
      blockinfile:
        path: /etc/bash.bashrc
        insertbefore: BOF
        marker: "# {mark} ANSIBLE MANAGED BLOCK - Define variables that works in non-interactive shell"
        block: |
          set -a
          . /home/vagrant/.env_default
          # Read file and match variables starting with lowercase - prepend with TF_VAR_ and export.
          while read p || [[ -n $p ]]; do [[ $p =~ ^[[:lower:]].*=.*$ ]] && export TF_VAR_$p; done < /home/vagrant/.env_default

          if [[ -f "/vagrant/dev/.env" ]]; then
              . /vagrant/dev/.env
              # Read file and match variables starting with lowercase - prepend with TF_VAR_ and export.
              while read p || [[ -n $p ]]; do [[ $p =~ ^[[:lower:]].*=.*$ ]] && export TF_VAR_$p; done < /vagrant/dev/.env
          fi
          if [[ -f "/vagrant/.env_override" ]]; then
              . /vagrant/.env_override
              # Read file and match variables starting with lowercase - prepend with TF_VAR_ and export.
              while read p || [[ -n $p ]]; do [[ $p =~ ^[[:lower:]].*=.*$ ]] && export TF_VAR_$p; done < /vagrant/.env_override
          fi
          unset p
          set +a
